// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/mongo"
)

// NewMockTaskUsecase creates a new instance of MockTaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskUsecase {
	mock := &MockTaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTaskUsecase is an autogenerated mock type for the TaskUsecase type
type MockTaskUsecase struct {
	mock.Mock
}

type MockTaskUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskUsecase) EXPECT() *MockTaskUsecase_Expecter {
	return &MockTaskUsecase_Expecter{mock: &_m.Mock}
}

// DeleteTask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) DeleteTask(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type MockTaskUsecase_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) DeleteTask(ctx interface{}, id interface{}) *MockTaskUsecase_DeleteTask_Call {
	return &MockTaskUsecase_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, id)}
}

func (_c *MockTaskUsecase_DeleteTask_Call) Run(run func(ctx context.Context, id string)) *MockTaskUsecase_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskUsecase_DeleteTask_Call) Return(err error) *MockTaskUsecase_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_DeleteTask_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockTaskUsecase_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetAllTask(ctx context.Context) ([]domain.Task, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTask")
	}

	var r0 []domain.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Task, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Task); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetAllTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTask'
type MockTaskUsecase_GetAllTask_Call struct {
	*mock.Call
}

// GetAllTask is a helper method to define mock.On call
//   - ctx
func (_e *MockTaskUsecase_Expecter) GetAllTask(ctx interface{}) *MockTaskUsecase_GetAllTask_Call {
	return &MockTaskUsecase_GetAllTask_Call{Call: _e.mock.On("GetAllTask", ctx)}
}

func (_c *MockTaskUsecase_GetAllTask_Call) Run(run func(ctx context.Context)) *MockTaskUsecase_GetAllTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTaskUsecase_GetAllTask_Call) Return(tasks []domain.Task, err error) *MockTaskUsecase_GetAllTask_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *MockTaskUsecase_GetAllTask_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Task, error)) *MockTaskUsecase_GetAllTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) GetTaskByID(ctx context.Context, id string) (domain.Task, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 domain.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (domain.Task, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) domain.Task); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type MockTaskUsecase_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTaskUsecase_Expecter) GetTaskByID(ctx interface{}, id interface{}) *MockTaskUsecase_GetTaskByID_Call {
	return &MockTaskUsecase_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", ctx, id)}
}

func (_c *MockTaskUsecase_GetTaskByID_Call) Run(run func(ctx context.Context, id string)) *MockTaskUsecase_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTaskUsecase_GetTaskByID_Call) Return(task domain.Task, err error) *MockTaskUsecase_GetTaskByID_Call {
	_c.Call.Return(task, err)
	return _c
}

func (_c *MockTaskUsecase_GetTaskByID_Call) RunAndReturn(run func(ctx context.Context, id string) (domain.Task, error)) *MockTaskUsecase_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewTask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) NewTask(ctx context.Context, task domain.Task) (*mongo.InsertOneResult, error) {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for NewTask")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Task) (*mongo.InsertOneResult, error)); ok {
		return returnFunc(ctx, task)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Task) *mongo.InsertOneResult); ok {
		r0 = returnFunc(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Task) error); ok {
		r1 = returnFunc(ctx, task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTaskUsecase_NewTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTask'
type MockTaskUsecase_NewTask_Call struct {
	*mock.Call
}

// NewTask is a helper method to define mock.On call
//   - ctx
//   - task
func (_e *MockTaskUsecase_Expecter) NewTask(ctx interface{}, task interface{}) *MockTaskUsecase_NewTask_Call {
	return &MockTaskUsecase_NewTask_Call{Call: _e.mock.On("NewTask", ctx, task)}
}

func (_c *MockTaskUsecase_NewTask_Call) Run(run func(ctx context.Context, task domain.Task)) *MockTaskUsecase_NewTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Task))
	})
	return _c
}

func (_c *MockTaskUsecase_NewTask_Call) Return(insertOneResult *mongo.InsertOneResult, err error) *MockTaskUsecase_NewTask_Call {
	_c.Call.Return(insertOneResult, err)
	return _c
}

func (_c *MockTaskUsecase_NewTask_Call) RunAndReturn(run func(ctx context.Context, task domain.Task) (*mongo.InsertOneResult, error)) *MockTaskUsecase_NewTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function for the type MockTaskUsecase
func (_mock *MockTaskUsecase) UpdateTask(ctx context.Context, id string, updatedTask domain.Task) error {
	ret := _mock.Called(ctx, id, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, domain.Task) error); ok {
		r0 = returnFunc(ctx, id, updatedTask)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTaskUsecase_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockTaskUsecase_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx
//   - id
//   - updatedTask
func (_e *MockTaskUsecase_Expecter) UpdateTask(ctx interface{}, id interface{}, updatedTask interface{}) *MockTaskUsecase_UpdateTask_Call {
	return &MockTaskUsecase_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, id, updatedTask)}
}

func (_c *MockTaskUsecase_UpdateTask_Call) Run(run func(ctx context.Context, id string, updatedTask domain.Task)) *MockTaskUsecase_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.Task))
	})
	return _c
}

func (_c *MockTaskUsecase_UpdateTask_Call) Return(err error) *MockTaskUsecase_UpdateTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTaskUsecase_UpdateTask_Call) RunAndReturn(run func(ctx context.Context, id string, updatedTask domain.Task) error) *MockTaskUsecase_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}
