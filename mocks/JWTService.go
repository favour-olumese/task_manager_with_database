// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockJWTService creates a new instance of MockJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTService {
	mock := &MockJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJWTService is an autogenerated mock type for the JWTService type
type MockJWTService struct {
	mock.Mock
}

type MockJWTService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTService) EXPECT() *MockJWTService_Expecter {
	return &MockJWTService_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function for the type MockJWTService
func (_mock *MockJWTService) GenerateToken(username string, role string) (string, error) {
	ret := _mock.Called(username, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(username, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(username, role)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, role)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTService_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJWTService_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - username
//   - role
func (_e *MockJWTService_Expecter) GenerateToken(username interface{}, role interface{}) *MockJWTService_GenerateToken_Call {
	return &MockJWTService_GenerateToken_Call{Call: _e.mock.On("GenerateToken", username, role)}
}

func (_c *MockJWTService_GenerateToken_Call) Run(run func(username string, role string)) *MockJWTService_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockJWTService_GenerateToken_Call) Return(s string, err error) *MockJWTService_GenerateToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockJWTService_GenerateToken_Call) RunAndReturn(run func(username string, role string) (string, error)) *MockJWTService_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function for the type MockJWTService
func (_mock *MockJWTService) ValidateToken(token string) (*domain.CustomClaims, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *domain.CustomClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.CustomClaims, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.CustomClaims); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJWTService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockJWTService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token
func (_e *MockJWTService_Expecter) ValidateToken(token interface{}) *MockJWTService_ValidateToken_Call {
	return &MockJWTService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockJWTService_ValidateToken_Call) Run(run func(token string)) *MockJWTService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) Return(customClaims *domain.CustomClaims, err error) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(customClaims, err)
	return _c
}

func (_c *MockJWTService_ValidateToken_Call) RunAndReturn(run func(token string) (*domain.CustomClaims, error)) *MockJWTService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}
