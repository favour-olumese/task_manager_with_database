// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/mongo"
)

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) CreateUser(ctx context.Context, user *domain.User) (*mongo.InsertOneResult, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *mongo.InsertOneResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) (*mongo.InsertOneResult, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.User) *mongo.InsertOneResult); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - user
func (_e *MockUserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(ctx context.Context, user *domain.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(insertOneResult *mongo.InsertOneResult, err error) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(insertOneResult, err)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *domain.User) (*mongo.InsertOneResult, error)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByUsername provides a mock function for the type MockUserRepository
func (_mock *MockUserRepository) FindUserByUsername(ctx context.Context, username string) (*domain.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserRepository_FindUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByUsername'
type MockUserRepository_FindUserByUsername_Call struct {
	*mock.Call
}

// FindUserByUsername is a helper method to define mock.On call
//   - ctx
//   - username
func (_e *MockUserRepository_Expecter) FindUserByUsername(ctx interface{}, username interface{}) *MockUserRepository_FindUserByUsername_Call {
	return &MockUserRepository_FindUserByUsername_Call{Call: _e.mock.On("FindUserByUsername", ctx, username)}
}

func (_c *MockUserRepository_FindUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindUserByUsername_Call) Return(user *domain.User, err error) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserRepository_FindUserByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*domain.User, error)) *MockUserRepository_FindUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}
